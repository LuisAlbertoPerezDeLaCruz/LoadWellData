/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.loadWellData;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import miLibreria.bd.ManejoBDAccess;
import miLibreria.bd.*;

/**
 *
 * @author USUARIO
 */
public class MuestraSlideSheetPerMD extends javax.swing.JDialog implements miLibreria.GlobalConstants {

    public long slideSheetId;
    public Run oRun;
    public ManejoBDI oBD;
    static DefaultTableModel modelo;
    
    public MuestraSlideSheetPerMD(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public void setParam(ManejoBDI oBDIn) {
        oBD=oBDIn;
        modelo = (DefaultTableModel) this.jTable1.getModel();
    }

    public void cargaTabla() {
        ResultSet rs;
        int cant=0;
        SlideSheetPerMD oSlideSheetPerMD=new SlideSheetPerMD();
        DecimalFormat df = new DecimalFormat("##########0.000");
        
        rs=oBD.select("SELECT count(*) FROM SlideSheetPerMD WHERE slideSheetId="+slideSheetId);
        if (rs!=null) {
            try {
                while (rs.next()) {
                    cant=rs.getInt(1);
                }
            } catch (SQLException ex) {
                Logger.getLogger(MuestraSlideSheetPerMD.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (cant>0) {
            Object[] o = new Object[cant];
            try {
                o=oBD.select(SlideSheetPerMD.class, "slideSheetId="+slideSheetId);
            } catch (InstantiationException | IllegalAccessException ex) {
                Logger.getLogger(MuestraSlideSheetPerMD.class.getName()).log(Level.SEVERE, null, ex);
            }
            for (int i=0;i<=cant-1;i++) {
                oSlideSheetPerMD=(SlideSheetPerMD) o[i];
                modelo.addRow(new Object[] { new SimpleDateFormat("dd/MM/yyyy").format(oSlideSheetPerMD.getFecha()),
                    new SimpleDateFormat("hh:mm:ss").format(oSlideSheetPerMD.getStartTime()),
                    new SimpleDateFormat("hh:mm:ss").format(oSlideSheetPerMD.getEndTime()),
                    oSlideSheetPerMD.getMdFrom(),oSlideSheetPerMD.getMdTo(),
                    oSlideSheetPerMD.getDrillingMode(),oSlideSheetPerMD.getTfMode(),
                    preparaValor(df.format(oSlideSheetPerMD.getTfAngle())),
                    preparaValor(df.format(oSlideSheetPerMD.getFlow())),
                    preparaValor(df.format(oSlideSheetPerMD.getSppOffBott())),
                    preparaValor(df.format(oSlideSheetPerMD.getSppOnBott())),
                    preparaValor(df.format(oSlideSheetPerMD.getWob())),
                    preparaValor(df.format(oSlideSheetPerMD.getSrpm())),
                    preparaValor(df.format(oSlideSheetPerMD.getTorque())),
                    preparaValor(df.format(oSlideSheetPerMD.getOffBotTorque())),
                    oSlideSheetPerMD.getOperationMode(),
                    preparaValor(df.format(oSlideSheetPerMD.getPowerSetting())),
                    //preparaValor(df.format(oSlideSheetPerMD.getDesiredPowerSetting())),
                    preparaValor(df.format(oSlideSheetPerMD.getDesiredTfAngles()))
                });
                
            }
        }
    }
    
    private Object preparaValor(Object o) {
        if (o.toString().contains(""+valorNulo)) {
            return valorNuloMuestra;
        } else
            return o;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "fecha", "start time", "end time", "md from", "md to", "drilling mode", "tf mode", "tf angle", "flow", "spf off bott", "spf on bott", "wob", "srpm", "torque", "offBottTorque", "operation mode", "power setting", "desired tf angle"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 704, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MuestraSlideSheetPerMD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MuestraSlideSheetPerMD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MuestraSlideSheetPerMD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MuestraSlideSheetPerMD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MuestraSlideSheetPerMD dialog = new MuestraSlideSheetPerMD(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
